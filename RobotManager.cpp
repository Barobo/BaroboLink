#include <stdio.h>
#include <stdlib.h>
#include "RobotManager.h"
#include "thread_macros.h"

CRobotManager::CRobotManager()
{
  int i;
  for(i = 0; i < MAX_CONNECTED; i++) {
    _mobots[i] = NULL;
  }
  _isPlaying = false;
}

CRobotManager::~CRobotManager()
{
}

bool CRobotManager::isConnected(int index) 
{
  if((index >= numEntries()) || index < 0) {
    return false;
  }
  if(_mobots[index] == NULL) {
    return false;
  }
  return Mobot_isConnected((mobot_t*)_mobots[index]);
}

int CRobotManager::addEntry(const char* entry)
{
  int rc;
  if(rc = ConfigFile::addEntry(entry)) {
    return rc;
  }

  /* Adjust the array of mobots */
  for(int i = (numEntries()-1); i >= 0; i--) {
    _mobots[i+1] = _mobots[i];
  }
}

void CRobotManager::moveMobot(int destIndex, int srcIndex)
{
  _mobots[destIndex] = _mobots[srcIndex];
  _mobots[srcIndex] = NULL;
}

int CRobotManager::insertEntry(const char* entry, int index)
{
  int rc;
  if(rc = ConfigFile::insertEntry(entry, index)) {
    return rc;
  }
  /* Move the existing mobot array */
  int i;
  for(i = numEntries(); i >= index; i--) {
    _mobots[i+1] = _mobots[i];
  }
  _mobots[index] = NULL;
  return 0;
}

bool CRobotManager::isPlaying()
{
  return _isPlaying;
}

int CRobotManager::connectIndex(int index)
{
  if(isConnected(index)) {
    return 0;
  }
  char name[80];
  sprintf(name, "mobot%d", numConnected()+1);
  recordMobot_t *mobot = (recordMobot_t*)malloc(sizeof(recordMobot_t));
  RecordMobot_init(mobot, name);
  int err;
  if(err = RecordMobot_connectWithAddress( mobot, getEntry(index), 1 )) {
    return err;
  }
  /* Insert the newly connected robot to the bottom of the list. */
  _mobots[index] = mobot;
  return err;
}

int CRobotManager::disconnect(int index)
{
  if(_mobots[index] == NULL) {
    return -1;
  }
  Mobot_disconnect((mobot_t*)_mobots[index]);
  _mobots[index] = NULL;
  return 0;
}

recordMobot_t* CRobotManager::getUnboundMobot()
{
  int i;
  recordMobot_t* mobot;
  mobot = getMobot(0);
  for(i = 1; mobot != NULL; i++) {
    if(mobot->bound == false) {
      return mobot;
    }
    mobot = getMobot(i);
  }
  return NULL;
}

int CRobotManager::numConnected()
{
  int num = 0, i;
  for(i = 0; i < MAX_CONNECTED; i++) {
    if(_mobots[i] == NULL) {
      continue;
    }
    if(_mobots[i] != NULL) {
      num++;
    }
  }
  return num;
}

int CRobotManager::numAvailable()
{
	return numEntries() - numConnected();
}

void CRobotManager::record()
{
  int i;
  recordMobot_t* mobot;
  for(i = 0; i < numConnected(); i++) {
    mobot = getMobot(i);
    RecordMobot_record(mobot);
  }
}

int CRobotManager::remove(int index)
{
  int rc;
  if(rc = ConfigFile::remove(index)) {
    return rc;
  }
  /* Adjust the list of mobots */
  _tmpMobot = _mobots[index];
  int i;
  for(i = index; i < numEntries(); i++) {
    _mobots[i] = _mobots[i+1];
  }
  return 0;
}

void CRobotManager::restoreSavedMobot(int index)
{
  if(_mobots[index] != NULL) {
    free(_mobots[index]);
  }
  _mobots[index] = _tmpMobot;
  _tmpMobot = NULL;
}

void CRobotManager::addDelay(double seconds)
{
  int i;
  recordMobot_t* mobot;
  for(i = 0; i < numConnected(); i++) {
    mobot = getMobot(i);
    RecordMobot_addDelay(mobot, seconds);
  }
}

void* robotManagerPlayThread(void* arg)
{
  CRobotManager *rm = (CRobotManager*)arg;
  recordMobot_t* mobot;
  if(rm->numConnected() <= 0) {
    rm->_isPlaying = false;
    return NULL;
  }
  int index, i;
  /* Go through each motion */
  for(index = 0; index < rm->getMobot(0)->numMotions; index++) {
    /* Go through each mobot */
    for(i = 0; i < rm->numConnected(); i++) {
      mobot = rm->getMobot(i);
      if(RecordMobot_getMotionType(mobot, index) == MOTION_SLEEP) {
        /* Sleep the correct amount of time and break */
        RecordMobot_play(mobot, index);
        break;
      } else if (RecordMobot_getMotionType(mobot, index) == MOTION_POS) {
        RecordMobot_play(mobot, index);
      } else {
        fprintf(stderr, "MEMORY ERROR %s:%d\n", __FILE__, __LINE__);
        rm->_isPlaying = false;
        return NULL;
      }
    }
  }
  rm->_isPlaying = false;
}

void CRobotManager::play()
{
  _isPlaying = true;
  THREAD_T thread;
  THREAD_CREATE(&thread, robotManagerPlayThread, this);
}

recordMobot_t* CRobotManager::getMobot(int connectIndex)
{
	if(connectIndex < 0 || connectIndex >= numConnected()) {
		return NULL;
	}
  int i;
  for(i = 0; i <= MAX_CONNECTED ; i++ ) {
    if(_mobots[i] == NULL) {continue;}
    if(_mobots[i] != NULL) {
      connectIndex--;
    }
    if(connectIndex < 0) {
      break;
    }
  }
	return _mobots[i];
}

string* CRobotManager::generateProgram(bool looped)
{
  string buf;
  string *program = new string();
  char tbuf[200];
  int i, j;
  *program += "/* Program generated by RobotController */\n";
  *program += "#include <mobot.h>\n\n";

  *program += "int main() {\n";

  /* Declare the appropiate number of CMobot variables */
  for(i = 0; i < numConnected(); i++) {
    sprintf(tbuf, "    CMobot mobot%d;\n", i+1);
    buf.assign(tbuf);
    *program += buf;
  }

  /* Connect to each one */
  for(i = 0; i < numConnected(); i++) {
    sprintf(tbuf, "    mobot%d.connect();\n", i+1);
    buf.assign(tbuf);
    *program += buf;
  }

  if(looped) {
    *program += "    /* Set the \"num\" variable to the number of times to loop. */\n";
    *program += "    int num = 3;\n";
    *program += "    int i;\n";
    *program += "    for(i = 0; i < num; i++) {";
  }
  /* Make sure there were connected mobots */
  if(getMobot(0) != NULL) {
    /* Now go through each motion */
    for(i = 0; i < getMobot(0)->numMotions; i++) {
      *program += "\n";
      /* First, print the comment for the motion */
      sprintf(tbuf, "/* %s */\n", RecordMobot_getMotionName(getMobot(0), i));
      buf.assign(tbuf);
      *program += "    ";
      if(looped) *program += "    ";
      *program += buf;
      /* Now, print each robots motion */
      for(j = 0; j < numConnected(); j++) {
        RecordMobot_getMotionString(getMobot(j), i, tbuf);
        buf.assign(tbuf);
        buf += "\n";
        if(looped) *program += "    ";
        *program += buf;
        if(RecordMobot_getMotionType(getMobot(j), i) == MOTION_SLEEP) {
          break;
        }
      }
      /* Make sure all the robots are done moving */
      for(j = 0; j < numConnected(); j++) {
        if(RecordMobot_getMotionType(getMobot(j), i) == MOTION_SLEEP) {
          break;
        }
        sprintf(tbuf, "mobot%d.moveWait();\n", j+1);
        buf.assign(tbuf);
        if(looped) *program += "    ";
        *program += buf;
      }
    }
  }
  if(looped) {
    *program += "    }\n";
  }
  *program += "    return 0;\n";
  *program += "}\n";
  return program;
}
